# プロジェクトルール: Google ADK Python エージェント (FastAPI + Streamlit UI)

## 目的

`google/adk-python` ライブラリで作成した計算エージェントのロジックをFastAPIでラップし、APIエンドポイントを提供する。さらに、Streamlitを使用してそのAPIと連携するチャット形式のWeb UIを作成する。

## アーキテクチャ

```mermaid
graph TD
    User[ユーザー] --> StreamlitUI(Streamlit UI - streamlit_app.py);
    StreamlitUI -- HTTP Request (POST /ask) --> FastAPI(FastAPI - api.py :8000);
    FastAPI -- 関数呼び出し --> AgentLogic(ADK Agent Logic);
    AgentLogic -- 応答 --> FastAPI;
    FastAPI -- HTTP Response --> StreamlitUI;
    StreamlitUI --> User;

    subgraph ADK Agent Logic (in api.py or imported)
        AgentLogic -- 呼び出し --> Adder(adder_agent.py);
        AgentLogic -- 呼び出し --> Subtractor(subtractor_agent.py);
        AgentLogic -- 呼び出し --> Multiplier(multiplier_agent.py);
    end

```

*   **FastAPI アプリケーション (`api.py`):**
    *   ADKエージェントの初期化とインテントハンドラーの登録を行う。
    *   `/ask` エンドポイント (POST) を提供する。
        *   ユーザーからのテキスト入力をJSONで受け取る。
        *   ADKエージェントロジックを呼び出して応答を生成する。
        *   応答テキストをJSONで返す。
    *   `uvicorn` で実行する (例: ポート8000)。
*   **Streamlit UI (`streamlit_app.py`):**
    *   チャット形式のインターフェースを提供する。
    *   ユーザー入力を受け付ける。
    *   入力があると、FastAPIの `/ask` エンドポイントにリクエストを送信する。
    *   FastAPIからの応答を受け取り、チャット履歴に表示する。
    *   `streamlit run` コマンドで実行する。
*   **ADK エージェントロジック:**
    *   FastAPIアプリ内で初期化され、リクエストに応じて呼び出される。
    *   計算ロジックは引き続き個別のファイル (`adder_agent.py`, `subtractor_agent.py`, `multiplier_agent.py`) に存在する。

## 実装計画

1.  **依存関係の追加:**
    *   仮想環境 (`.venv`) に `fastapi`, `"uvicorn[standard]"`, `streamlit`, `requests` を `uv pip install` で追加する。
2.  **ADKエージェントロジックの準備:**
    *   `main_agent.py` のロジックを参考に、テキスト入力から応答テキストを返す関数を準備する（FastAPIから呼び出しやすくするため）。
3.  **FastAPIアプリケーションの実装 (`api.py`):**
    *   FastAPIアプリと `/ask` エンドポイントを実装する。
    *   ADKエージェントの初期化と応答生成ロジックを組み込む。
4.  **Streamlitアプリケーションの実装 (`streamlit_app.py`):**
    *   チャットUIを実装する。
    *   FastAPIへのリクエスト送信と応答表示ロジックを実装する。
5.  **テスト:**
    *   `uvicorn` でFastAPIサーバーを起動する。
    *   `streamlit run` でStreamlitアプリを起動し、UI経由でエージェントと対話できるか確認する。

## 開発言語

*   Python 3.x

## 主要ライブラリ

*   `google/adk-python`
*   `fastapi`
*   `uvicorn`
*   `streamlit`
*   `requests`

## コーディング規約

*   プロジェクトルール、およびソースコード内のコメントはすべて日本語で記述すること。
*   仮想環境の管理には `uv` を使用し、ルートディレクトリの `activate_venv.sh` スクリプトの仕様に従うこと。
